name: CI

on:
  workflow_call:
  pull_request:
    branches: [ "main" ]

env:
  # Use for multi-branch deployment
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:

  lint_formatting:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11" ]
        poetry-version: [ "latest" ]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        run: poetry install --with dev

      - name: Linting code
        run: poetry run ruff check . # INFO
        continue-on-error: true

      - name: Formating code
        run: poetry run ruff format --check . # INFO
        continue-on-error: true


  unit_tests:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11" ]
        poetry-version: [ "latest" ]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        run: poetry install --with dev

      - name: Type checking
        run: poetry run pyright .

      - name: Run automated tests
        run: poetry run coverage run -m pytest tests -v -s

      - name: Generate coverage report
        run: poetry run coverage report -m
